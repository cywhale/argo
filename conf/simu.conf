
# using pyproject.toml and `pip install build`
# cp odbargo_app.egg-info/requires.txt dist/requirements.txt

pip install -U build twine
python -m build        # creates wheel + sdist for the current package
# twine upload dist/*  # Upload to PyPI

# Package install
pip install --force-reinstall ~/python/argo/dist/odbargo-0.2.x.tar.gz

# local install
pip install -e .
pip install -e .[view]

# executive
pyinstaller cli.spec
pyinstaller view.spec

# Other old trials
# ======================
# old project structure
# argo/
# ├─ setup.py
# ├─ argo_app/             # This is the package directory
# │  ├─ __init__.py
# │  ├─ app.py             # Renamed from argo_app.py to avoid confusion
# │  ├─ src/
# │  │  ├─ __init__.py
# │  │  ├─ config.py
# │  │  ├─ argo_utils.py

# run API server
## localhost: gunicorn argo_app.app:app -k uvicorn.workers.UvicornWorker -b 127.0.0.1:8090 --timeout 600
# python argo_app/app.py 8091  # at arbitary port

# kill process
# ps -ef | grep 'argo_app' | grep -v grep | awk '{print $2}' | xargs -r kill -9

# Package (old setup.py deprecated)
# python setup.py sdist bdist_wheel

# PyInstaller (not correctly work yet) #onedir or onefile
# pyi-makespec --onedir --name odbargo argo_app/app.py
# pyinstaller --upx-dir=/usr/bin --distpath ./bin odbargo.spec

# or full command
# pyinstaller --onefile --upx-dir=/usr/bin --name odbargo --distpath ./bin --add-data 'argo_app:argo_app' --add-data 'argo_app/src:argo_app/src' argo_app/app.py

# Dockerfile
# docker build --network=host -t odbargo_app .

# prompt to check
# docker run -it --network=xxx odbargo_app /bin/bash

# docker compose (no logs, in background: -d)
# docker compose up


